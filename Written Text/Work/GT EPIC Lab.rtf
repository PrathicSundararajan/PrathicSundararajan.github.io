{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww25400\viewh15500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9930\tx21799\ri-5083\pardirnatural\partightenfactor0

\f0\fs36 \cf0 GT EPIC Lab\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9930\ri-5083\pardirnatural\partightenfactor0

\fs24 \cf0 Introduction \
I joined the lab under the Human Robotic Augmentation Team through the Vertically Integrated Projects program at Georgia Tech. \expnd0\expndtw0\kerning0
My team led by Ben Shafer, a GT grad student, is centered around testing a variety of controllers (including proportional myoelectric, impedance, neuromuscular model based, hybrids, etc.) and utilizing Human in the Loop Optimization (HiLo) to decrease the metabolic cost of using a hip exoskeleton. The role of my partner and I in the project was to develop a controller with a user interface using MatLab and to link this controller to a Simulink model. The goal of the controller we are working on is to adjust control parameters live while also allowing the user to visualize the current state of the exoskeleton better than what was previously provided with Simulink Real Time Explorer. The ultimate goal is to reduce the total time spent testing with a person in the hip exoskeleton.\
\kerning1\expnd0\expndtw0 \
\
The Project/My Role\
My partner and I decided to split the project into two main components. Component one was the ability to access the Simulink model from our controller and change the control parameters live without having to rebuild the model. The second component was the ability to pull data off the currently running Simulink model and into our GUI. My partner focused on the first component while I worked on the second. I struggled a lot initially in the project attempting to figure out the best way to pull a constantly changing value from the Simulink model. I considered C-Mex functions [CONFIRM], creating a user block and then setting the user data field to the value I needed but in the end with a little bit of external help I decided that host scopes would be the most effective method to implement in this case. After making this decision, I implemented a timer object on the MATLAB side of the project so that it would constantly pull the data values from the running Simulink model at a fast enough rate to keep the graphs up to date. I found that I could not surpass 14 Hz with the timer object in the GUI if I wanted it to not show any lag. I ended up deciding to use an animated line to graph the data we pulled from the model because it was the easiest one that met all our requirements.  \
\
\
Final Product  \
By the end of the semester, we had finished working on our MATLAB GUI and it was ready to be packaged into an app. We were now able to control parameters from the GUI and also provided a lot of customizable features in terms of graphing the data live. In addition, the user is also able to save the data recorded during the testing session. Our final step was to modularize the GUI so that we would be able to use the GUI with various different Simulink models. Once we had finished making it, we presented the app to the rest of the members in the lab. \
\
\
What I Gained\
This experience overall was very useful as I got a lot of exposure to a lab environment. I learned a lot in terms of actually getting hands on with a project. However, I would say that the most important lesson I learned was the importance of not going down rabbit holes when presented with a broad problem. To elaborate a little bit, early on in the project the first thing I had to figure out was how to pull data from the Simulink model and into the MATLAB app at a very fast rate. I evaluated a couple different possibilities and looked into the different options. I spent a lot of time trying to do this by using user defined MATLAB function blocks and changing their user data parameter. However, this was extremely complex so I was stuck on this part of the project for a while. It was during this roadblock where I got help from my mentor, Ben, during which he suggested I check out host scopes. Host scopes were the answer to all my problems but I had not not realized this because I had not come across it during my initial research. This roadblock could have been easily avoided if I had looked into how I could use Simulink a little bit more from a higher level perspective to achieve my goal rather than immediately diving into user defined functions. Through this, I learned the importance of when presented with a problem, attempting to find the easiest and most efficient way to solve a problem rather than exhausting all my resources into one sole idea that could potentially work. \
\
\
\
}